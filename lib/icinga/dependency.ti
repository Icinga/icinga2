/* Icinga 2 | (c) 2012 Icinga GmbH | GPLv2+ */

#include "icinga/customvarobject.hpp"
#include "icinga/checkable.hpp"
#impl_include "icinga/service.hpp"

library icinga;

namespace icinga
{

code {{{
class DependencyNameComposer : public NameComposer
{
public:
	virtual String MakeName(const String& shortName, const Object::Ptr& context) const;
	virtual Dictionary::Ptr ParseName(const String& name) const;
};
}}}

class Dependency : CustomVarObject < DependencyNameComposer
{
	load_after Host;
	load_after Service;

	[config, required, navigation(child_host)] name(Host) child_host_name {
		navigate {{{
			return Host::GetByName(GetChildHostName());
		}}}
	};

	[config, navigation(child_service)] String child_service_name {
		track {{{
			if (!oldValue.IsEmpty()) {
				Service::Ptr service = Service::GetByNamePair(GetParentHostName(), oldValue);
				DependencyGraph::RemoveDependency(this, service.get());
			}

			if (!newValue.IsEmpty()) {
				Service::Ptr service = Service::GetByNamePair(GetParentHostName(), newValue);
				DependencyGraph::AddDependency(this, service.get());
			}
		}}}
		navigate {{{
			if (GetChildServiceName().IsEmpty())
				return nullptr;

			Host::Ptr host = Host::GetByName(GetChildHostName());
			return host->GetServiceByShortName(GetChildServiceName());
		}}}
	};

	[config, required, navigation(parent_host)] name(Host) parent_host_name {
		navigate {{{
			return Host::GetByName(GetParentHostName());
		}}}
	};

	[config, navigation(parent_service)] String parent_service_name {
		track {{{
			if (!oldValue.IsEmpty()) {
				Service::Ptr service = Service::GetByNamePair(GetParentHostName(), oldValue);
				DependencyGraph::RemoveDependency(this, service.get());
			}

			if (!newValue.IsEmpty()) {
				Service::Ptr service = Service::GetByNamePair(GetParentHostName(), newValue);
				DependencyGraph::AddDependency(this, service.get());
			}
		}}}
		navigate {{{
			if (GetParentServiceName().IsEmpty())
				return nullptr;

			Host::Ptr host = Host::GetByName(GetParentHostName());
			return host->GetServiceByShortName(GetParentServiceName());
		}}}
	};

	[config, navigation] name(TimePeriod) period (PeriodRaw) {
		navigate {{{
			return TimePeriod::GetByName(GetPeriodRaw());
		}}}
	};

	[config] array(Value) states;
	[no_user_view, no_user_modify] int state_filter_real (StateFilter);

	[config] bool ignore_soft_states {
		default {{{ return true; }}}
	};

	[config] bool disable_checks;
	[config] bool disable_notifications {
		default {{{ return true; }}}
	};
};

}
