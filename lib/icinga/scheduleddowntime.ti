/* Icinga 2 | (c) 2012 Icinga GmbH | GPLv2+ */

#include "icinga/customvarobject.hpp"
#impl_include "icinga/service.hpp"

library icinga;

namespace icinga
{

code {{{
class ScheduledDowntimeNameComposer : public NameComposer
{
public:
	virtual String MakeName(const String& shortName, const Object::Ptr& context) const;
	virtual Dictionary::Ptr ParseName(const String& name) const;
};
}}}

class ScheduledDowntime : CustomVarObject < ScheduledDowntimeNameComposer
{
	// Scheduled Downtimes have a dependency on Downtimes. This is to make sure ScheduledDowntimes are activated after
	// the Downtimes (and other checkables)
	activation_priority 20;

	load_after Host;
	load_after Service;

	[config, protected, required, navigation(host)] name(Host) host_name {
		navigate {{{
			return Host::GetByName(GetHostName());
		}}}
	};
	[config, protected, navigation(service)] String service_name {
		track {{{
			if (!oldValue.IsEmpty()) {
				Service::Ptr service = Service::GetByNamePair(GetHostName(), oldValue);
				DependencyGraph::RemoveDependency(this, service.get());
			}

			if (!newValue.IsEmpty()) {
				Service::Ptr service = Service::GetByNamePair(GetHostName(), newValue);
				DependencyGraph::AddDependency(this, service.get());
			}
		}}}
		navigate {{{
			if (GetServiceName().IsEmpty())
				return nullptr;

			Host::Ptr host = Host::GetByName(GetHostName());
			return host->GetServiceByShortName(GetServiceName());
		}}}
	};

	[config, required] String author;
	[config, required] String comment;

	[config] double duration;
	[config] bool fixed {
		default {{{ return true; }}}
	};

	[config] Value child_options {
	    default {{{ return "DowntimeNoChildren"; }}}
	};

	[config, required] Dictionary::Ptr ranges;
};

validator ScheduledDowntime {
	Dictionary ranges {
		String "*";
	};
};

}
