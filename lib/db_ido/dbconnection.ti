/******************************************************************************
 * Icinga 2                                                                   *
 * Copyright (C) 2012-2017 Icinga Development Team (https://www.icinga.com/)  *
 *                                                                            *
 * This program is free software; you can redistribute it and/or              *
 * modify it under the terms of the GNU General Public License                *
 * as published by the Free Software Foundation; either version 2             *
 * of the License, or (at your option) any later version.                     *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with this program; if not, write to the Free Software Foundation     *
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.             *
 ******************************************************************************/

#include "db_ido/dbquery.hpp"
#include "base/configobject.hpp"

library db_ido;

namespace icinga
{

abstract class DbConnection : ConfigObject
{
	[config] String table_prefix {
		default {{{ return "icinga_"; }}}
	};

	[config, required] Dictionary::Ptr cleanup {
		default {{{ return new Dictionary(); }}}
	};

	[config] Array::Ptr categories {
		default {{{
			Array::Ptr cat = new Array();
			cat->Add("DbCatConfig");
			cat->Add("DbCatState");
			cat->Add("DbCatAcknowledgement");
			cat->Add("DbCatComment");
			cat->Add("DbCatDowntime");
			cat->Add("DbCatEventHandler");
			cat->Add("DbCatFlapping");
			cat->Add("DbCatNotification");
			cat->Add("DbCatProgramStatus");
			cat->Add("DbCatRetention");
			cat->Add("DbCatStateHistory");

			return cat;
		}}}
	};
	[no_user_view, no_user_modify] int categories_filter_real (CategoryFilter);

	[config] bool enable_ha {
		default {{{ return true; }}}
	};

	[config] double failover_timeout {
		default {{{ return 60; }}}
	};

	[no_user_modify] String schema_version;
	[no_user_modify] bool connected;
	[no_user_modify] bool should_connect {
		default {{{ return true; }}}
	};
};


validator DbConnection {
	Dictionary cleanup {
		Number acknowledgements_age;
		Number commenthistory_age;
		Number contactnotifications_age;
		Number contactnotificationmethods_age;
		Number downtimehistory_age;
		Number eventhandlers_age;
		Number externalcommands_age;
		Number flappinghistory_age;
		Number hostchecks_age;
		Number logentries_age;
		Number notifications_age;
		Number processevents_age;
		Number statehistory_age;
		Number servicechecks_age;
		Number systemcommands_age;
	};

	Array categories {
		String "*";
	};
};

}
