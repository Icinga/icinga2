/** The ElasticsearchDatastreamWriter feature writes Icinga 2 events to an Elasticsearch datastream.
* This feature requires Elasticsearch 7.9 or later.
*/

object ElasticsearchDatastreamWriter "elasticsearch" {
    host = "127.0.0.1"
    port = 9200

    /* To enable a https connection, set enable_tls to true. */
    // enable_tls = false

    /* The datastream namespace to use. This can be used to separate different
    *  Icinga instances. Or for letting multiple Writers write to different
    *  datastreams in the same Elasticsearch cluster. By using the filter option.
    *  The Elasticsearch datastream name will be
    *  "metrics-icinga2.{check}-{datastream_namespace}".
    */
    // datastream_namespace = "default"

    /* You can authorize icinga2 through three different methods.
    * 1. Basic authentication with username and password.
    * 2. Bearer token authentication with api_token.
    * 3. Client certificate authentication with cert_path and key_path.
    */
    // username = "icinga2"
    // password = "changeme"

    // api_token = ""

    // cert_path = "/path/to/cert.pem"
    // key_path = "/path/to/key.pem"
    // ca_path = "/path/to/ca.pem"

    /* Enable sending the threashold values as additional fields
    *  with the service check metrics. If set to true, it will
    *  send warn and crit for every performance data item.
    */
    // enable_send_thresholds = false

    /* The flush settings control how often data is sent to Elasticsearch.
    *  You can either flush based on a time interval or the number of
    *  events in the buffer. Whichever comes first will trigger a flush.
    */
    // flush_threshold = 1024
    // flush_interval = 10s

    /* By default, all endpoints in a zone will activate the feature and start
    * writing events to the Elasticsearch HTTP API. In HA enabled scenarios,
    * it is possible to set `enable_ha = true` in all feature configuration
    * files. This allows each endpoint to calculate the feature authority,
    * and only one endpoint actively writes events, the other endpoints
    * pause the feature.
    */
    // enable_ha = false

    /* By default, the feature will create an index template in Elasticsearch
    * for the datastreams. If you want to manage the index template yourself,
    * set manage_index_template to false.
    */
    // manage_index_template = true

    /* Additional tags and labels can be added to the host and service
    * documents by using the host_tags_template, service_tags_template,
    * host_labels_template and service_labels_template options.
    * The tags and labels are static and will be added to every document.
    */
    // host_tags_template = [ "icinga", "$host.vars.os$" ]
    // service_tags_template = [ "icinga", "$service.vars.id$" ]
    // host_labels_template = { "env" = "production", "os" = "$host.vars.os$" }
    // service_labels_template = { "env" = "production", "id" = "$host.vars.id$" }

    /* The filter option can be used to filter which events are sent to
    * Elasticsearch. The filter is a regular Icinga 2 filter expression.
    * The filter is applied to both host and service events.
    * If the filter evaluates to true, the event is sent to Elasticsearch.
    * If the filter is not set, all events are sent to Elasticsearch.
    * You can use any attribute of the host, service, checkable or
    * checkresult (cr) objects in the filter expression.
    */
    // filter = {{ "host.name == 'myhost' || service.name == 'myservice'" }}
}
